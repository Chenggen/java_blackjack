{"name":"Java blackjack","tagline":"Micro project of software enginieering to practice Design Pattern - Strategy Pattern","body":"## UE Génie Logiciel\r\n# TP3 : Design Patterns\r\n\r\n### Objectifs pédagogiques\r\nL’objectif de ce TP est : \r\n- de mettre en pratique un Design Pattern que vous avez vu en cours : le DP Strategy\r\n- d’apprendre à utiliser un outil de modélisation UML pour générer du code\r\n\r\n### Le jeu de Blackjack simplifié\r\nDans cet exercice, nous allons concevoir et développer un jeu de Blackjack simplifié.\r\n\r\nLe Blackjack est un jeu de carte qui oppose la banque à tous les joueurs. Le but du jeu est de battre la banque sans dépasser 21. Nous présentons ici les règles du jeu de la version simplifiée \r\n\r\nLa valeur des cartes est établie comme suit :\r\n- De 1 à 10 : valeur nominale des cartes\r\n- Pour chaque figure : 10 points\r\n\r\nLe croupier distribue 2 cartes à chaque joueur y compris à la banque. Le croupier demande alors à chaque joueur s’il souhaite de nouvelles cartes. A chaque nouvelle carte, le joueur visualise sa valeur et peut choisir de recevoir\r\nune nouvelle carte ou de s’arrêter. La banque est servie en dernier.\r\n\r\nLorsque le tour est fini, on regarde qui a gagné :\r\n- Si la banque à plus que 21 :\r\n  - les joueurs qui ont <= 21 gagnent\r\n  - les autres joueurs font match nul avec la banque\r\n- Si la banque n’a pas dépassé 21 :\r\n  - tous les joueurs qui ont plus que la banque et qui n’ont pas dépassé\r\n21 ont gagné\r\n  - tous les joueurs qui ont plus que 21 ou moins que la banque ont perdu\r\n  - tous les joueurs qui ont la même valeur que la banque font match nul\r\n\r\nToute la stratégie du jeu se retrouve dans le choix de demander une carte supplémentaire. On peut imaginer de différentes stratégies. La plus simple consiste à décider aléatoirement (quelque soit son jeu). Une autre stratégie\r\npourrait-être de demander à un opérateur humain s’il souhaite une nouvelle carte. Une troisième stratégie serait de demander des cartes tant que la somme des cartes dans son jeu est inférieure à un seuil (c’est la stratégie\r\ngénéralement adoptée par la banque).\r\n\r\n### Travail à réaliser\r\n\r\n#### _Tache 1 : conception_\r\n\r\nProposer un diagramme de classe UML du jeu de Blackjack simplifié en vous\r\nappuyant sur le Pattern Strategy.\r\n\r\nAfin de faciliter la génération du code, vous veillerez à :\r\n- bien définir les associations entre les classes (type d’association,\r\ndirection de l’association, multiplicité, rôle des classes dans les\r\nassociations…)\r\n- définir la visibilité de chaque attribut et méthode\r\n\r\n#### _Tache 2 : implémentation_\r\n\r\nGénérer le code à partir du diagramme UML et compléter les classes. Votre\r\ncode devra implémenter au moins deux stratégie : la stratégie aléatoire et la\r\nstratégie qui fait référence à un humain. \r\n\r\n### Authors and Contributors\r\nIn 2015, Frederic WEI (@FredWe), and Chenggen LI (@chenggen) founded this project.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}